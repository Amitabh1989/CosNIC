# Generated by Django 5.1 on 2024-09-04 03:41

import django.contrib.postgres.fields
import django.db.models.deletion
import test_runner.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("sutclient", "0009_alter_rmii_instance_id"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CtrlPackageRepo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "repo_version",
                    models.CharField(
                        default="Controller-2.2.9a63", max_length=100, unique=True
                    ),
                ),
                ("last_scanned", models.DateTimeField(auto_now=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Server",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("ip", models.GenericIPAddressField()),
                ("capacity", models.IntegerField()),
                ("current_load", models.IntegerField()),
                ("port", models.IntegerField()),
                ("username", models.CharField(max_length=100)),
                ("password", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "os_name",
                    models.CharField(
                        choices=[("rhel", "RHEL"), ("windows", "Windows")],
                        max_length=100,
                    ),
                ),
                ("kernel", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="TestJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "celery_job_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("retries", models.IntegerField(default=1)),
                ("retry_delay", models.IntegerField(default=60)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("aborted", "Aborted"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("celery_result", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="TestCase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tcid", models.CharField(max_length=100, unique=True)),
                ("title", models.CharField(max_length=250)),
                ("path", models.CharField(max_length=500)),
                ("suite_name", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "applicable_os",
                    models.CharField(
                        blank=True, default="linux", max_length=20, null=True
                    ),
                ),
                ("feature", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "sub_feature",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("controllers", models.JSONField(default=list)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("stress", "Stress"),
                            ("functional", "Functional"),
                            ("hammer", "Hammer"),
                            ("sanity", "Sanity"),
                        ],
                        default="functional",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["controllers"], name="test_runner_control_9c1b5c_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="SubTests",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
                ("path", models.CharField(max_length=500)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "test_case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subtests",
                        to="test_runner.testcase",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nickname", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("stress", "Stress"),
                            ("functional", "Functional"),
                            ("hammer", "Hammer"),
                            ("sanity", "Sanity"),
                        ],
                        default="functional",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "subtests_to_run",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(), default=list, size=None
                    ),
                ),
                ("error", models.TextField(blank=True)),
                (
                    "log_file",
                    models.FileField(
                        blank=True,
                        max_length=500,
                        null=True,
                        upload_to=test_runner.models.create_path,
                    ),
                ),
                (
                    "report_file",
                    models.FileField(
                        blank=True,
                        max_length=500,
                        null=True,
                        upload_to=test_runner.models.create_path,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("passed", "Passed"),
                            ("failed", "Failed"),
                            ("aborted", "Aborted"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "test_case",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_runs",
                        to="test_runner.testcase",
                    ),
                ),
                (
                    "test_job",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_runs",
                        to="test_runner.testjob",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_runs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="testjob",
            name="test_run",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="test_runner.testrun",
            ),
        ),
        migrations.CreateModel(
            name="TestCaseResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("passed", "Passed"),
                            ("failed", "Failed"),
                            ("aborted", "Aborted"),
                        ],
                        max_length=20,
                    ),
                ),
                ("output", models.TextField()),
                ("error", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("log", models.TextField(blank=True)),
                (
                    "zipped_log",
                    models.FileField(blank=True, null=True, upload_to="logs/"),
                ),
                (
                    "test_case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="test_runner.testcase",
                    ),
                ),
                (
                    "test_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="test_runner.testrun",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VirtualEnvironment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nickname", models.CharField(blank=True, max_length=100, null=True)),
                ("venv_name", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("in-use", "In Use"),
                            ("free", "Free"),
                            ("deleted", "Deleted"),
                            ("error", "Error"),
                        ],
                        default="created",
                        max_length=50,
                    ),
                ),
                ("path", models.CharField(blank=True, max_length=500, null=True)),
                ("python_version", models.CharField(default="3.9", max_length=20)),
                ("lease_duration", models.DurationField(blank=True, null=True)),
                ("assigned_at", models.DateTimeField(blank=True, null=True)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "requirements",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=test_runner.models.requirements_upload_path,
                    ),
                ),
                (
                    "script",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=test_runner.models.scripts_upload_path,
                    ),
                ),
                (
                    "config_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sutclient.config",
                    ),
                ),
                (
                    "ctrl_package_version",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="venv",
                        to="test_runner.ctrlpackagerepo",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="venv",
                        to="test_runner.server",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="venv",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="testjob",
            name="venv",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="test_jobs",
                to="test_runner.virtualenvironment",
            ),
        ),
        migrations.AddConstraint(
            model_name="virtualenvironment",
            constraint=models.UniqueConstraint(
                fields=("user", "venv_name"), name="unique_venv_name_per_user"
            ),
        ),
    ]
