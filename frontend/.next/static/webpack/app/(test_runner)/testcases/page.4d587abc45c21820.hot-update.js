"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(test_runner)/testcases/page",{

/***/ "(app-pages-browser)/./src/reduxToolkit/testCasesSlice.js":
/*!********************************************!*\
  !*** ./src/reduxToolkit/testCasesSlice.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchTestCases: function() { return /* binding */ fetchTestCases; },\n/* harmony export */   resetTestCases: function() { return /* binding */ resetTestCases; },\n/* harmony export */   setError: function() { return /* binding */ setError; },\n/* harmony export */   setLoading: function() { return /* binding */ setLoading; },\n/* harmony export */   setTestCases: function() { return /* binding */ setTestCases; }\n/* harmony export */ });\n/* harmony import */ var _api_test_cases_apis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/api/test_cases_apis */ \"(app-pages-browser)/./src/api/test_cases_apis.jsx\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(app-pages-browser)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n/* harmony import */ var _services_indexedDBService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/indexedDBService */ \"(app-pages-browser)/./src/services/indexedDBService.js\");\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// // Thunk for fetching test cases asynchronously\n// export const fetchTestCases = createAsyncThunk(\n//     // \"testCases/fetchTestCases\",\n//     \"testCases/fetchTestCases\",\n//     async (_, { rejectWithValue }) => {\n//         console.log(\"fetchTestCases thunk called!\"); // Add this for debugging\n//         try {\n//             const response = await getTestCasesApi();\n//             console.log(\"Test cases response asyncThunk :\", response.data); // Debug response\n//             return response.data;\n//         } catch (error) {\n//             console.error(\"Error in fetchTestCases thunk:\", error); // Debug error\n//             return rejectWithValue(error.message);\n//         }\n//     }\n// );\n// const initialTestCasesState = {\n//     testCasesRecord: [], // Ensure this is an array\n//     isIndexed: false,\n//     loading: false, // Track loading state\n//     error: null, // Track errors\n// };\n// // Create testCases slice\n// const testCasesSlice = createSlice({\n//     name: \"testCases\",\n//     initialState: initialTestCasesState,\n//     reducers: {\n//         setTestCases: (state, action) => {\n//             state.testCasesRecord = action.payload; // Update test cases\n//             console.log(`Loaded testcasesRecord data`);\n//         },\n//         setIsTestCaseIndexed: (state, action) => {\n//             state.isIndexed = action.payload; // Update index flag\n//         },\n//     },\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(fetchTestCases.pending, (state) => {\n//                 state.loading = true;\n//                 state.error = null;\n//                 console.log(\"Fetching test cases, pending...\");\n//             })\n//             .addCase(fetchTestCases.fulfilled, (state, action) => {\n//                 state.testCasesRecord = action.payload;\n//                 state.isIndexed = true;\n//                 state.loading = false;\n//                 console.log(\n//                     `State is fulfilled : ${state.testCasesRecord.length}`\n//                 );\n//             })\n//             .addCase(fetchTestCases.rejected, (state, action) => {\n//                 state.loading = false;\n//                 // state.error = action.error.message;\n//                 state.error = action.payload || action.error.message;\n//                 console.error(\"Test cases fetching failed:\", state.error);\n//             });\n//     },\n// });\n// export const { setTestCases, setIsTestCaseIndexed } = testCasesSlice.actions;\n// export default testCasesSlice.reducer;\n// features/testCasesSlice.js\n\n\n// import Dexie from \"dexie\";\n// const db = new Dexie(\"CosNICDatabase\");\n// db.version(1).stores({\n//     testCases: \"++id, tcid, title, suite_name, applicable_os, stream, category\",\n// });\n//  [Violation] 'success' handler took 155ms\n// export async function batchInsert(data, batchSize = 100) {\n//     for (let i = 0; i < data.length; i += batchSize) {\n//         const batch = data.slice(i, i + batchSize);\n//         const existingRecords = await db.testCases\n//             .where(\"id\")\n//             .anyOf(batch.map((record) => record.id))\n//             .toArray();\n//         const existingIds = new Set(existingRecords.map((record) => record.id));\n//         const newBatch = batch.filter((item) => !existingIds.has(item.id));\n//         // Insert only new records\n//         if (newBatch.length > 0) {\n//             await db.testCases.bulkPut(newBatch);\n//         }\n//     }\n// }\n// Async thunk to fetch test cases\n/* This `fetchTestCases` function is an asynchronous thunk created using `createAsyncThunk` from Redux Toolkit. It is responsible for fetching test cases data either from the Redux store, IndexedDB, or an external API. */ // export const fetchTestCases = createAsyncThunk(\n//     \"testCases/fetchTestCases\",\n//     async (_, { getState, rejectWithValue }) => {\n//         // try {\n//         const state = getState();\n//         console.log(`GetState value in thunk : ${JSON.stringify(state)}`);\n//         const cachedTestCases = state.testCases;\n//         console.log(`Cached test case : ${cachedTestCases}`);\n//         // Check if data exists in Redux store\n//         if (cachedTestCases && cachedTestCases.length > 0) {\n//             console.log(\"Returning data from Redux store\");\n//             return cachedTestCases;\n//         }\n//         // Check IndexedDB\n//         // const indexedDbTestCases = await db.testCases.toArray(); // Corrected reference to the 'testcases' table\n//         // console.log(\n//         //     `indexedDbTestCases test case : ${indexedDbTestCases?.length}`\n//         // );\n//         // if (indexedDbTestCases?.length > 0) {\n//         //     console.log(\n//         //         \"Returning data from IndexedDB, num records : \",\n//         //         indexedDbTestCases.length\n//         //     );\n//         //     return indexedDbTestCases;\n//         // }\n//         // try {\n//         // Fetch from backend API if not found\n//         const response = await getTestCasesApi();\n//         console.log(`Response : ${response.status}`);\n//         if (response.status != 200) {\n//             return rejectWithValue(\"Network response was not ok\");\n//         }\n//         // Save to IndexedDB\n//         // await batchInsert(response.data);\n//         // await db.transaction(\"rw\", db.testcases, async () => {\n//         //     await db.testcases.bulkPut(data);\n//         // });\n//         return response.data;\n//     }\n// );\n// Async thunk to fetch test cases\n// export const fetchTestCases = createAsyncThunk(\n//     \"testCases/fetchTestCases\",\n//     async (_, { getState, rejectWithValue }) => {\n//         try {\n//             // 1. Check Redux store first (data already in memory)\n//             const state = getState();\n//             const cachedTestCases = state.testCases?.data;\n//             if (cachedTestCases && cachedTestCases.length > 0) {\n//                 console.log(\"Returning cached test cases from Redux store.\");\n//                 return cachedTestCases;\n//             }\n//             // 2. Check IndexedDB (if data is saved locally)\n//             const indexedDbTestCases = await db.testCases.toArray();\n//             if (indexedDbTestCases.length > 0) {\n//                 console.log(\"Returning test cases from IndexedDB.\");\n//                 return indexedDbTestCases;\n//             }\n//             // 3. Fetch from API (if no local data found)\n//             const response = await getTestCasesApi(); // Replace with actual API call\n//             if (response.status !== 200) {\n//                 throw new Error(\"Failed to fetch data from API\");\n//             }\n//             console.log(\"Fetched test cases from API.\");\n//             // 4. Save the fetched data to IndexedDB\n//             await batchInsert(response.data); // Insert into IndexedDB\n//             // Return the fresh data\n//             return response.data;\n//         } catch (error) {\n//             console.error(\"Error fetching test cases:\", error.message);\n//             return rejectWithValue(error.message);\n//         }\n//     }\n// );\nconst PAGE_SIZE = 50;\nconst fetchTestCases = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.createAsyncThunk)(\"testCases/fetchTestCases\", async function() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, { getState, dispatch, rejectWithValue } = arguments.length > 1 ? arguments[1] : void 0;\n    try {\n        // 1. Check Redux store first if exists\n        // 2. Check IndexedDB\n        // const indexedDbTestCases = await db.testCases\n        //     .offset((page - 1) * PAGE_SIZE)\n        //     .limit(PAGE_SIZE)\n        //     .toArray();\n        // if (indexedDbTestCases.length > 0) {\n        //     console.log(\"Returning Test Cases from IndexedDB\");\n        //     return indexedDbTestCases;\n        // }\n        const indexedDbTestCases = await _services_indexedDBService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].testCases.toArray();\n        if (indexedDbTestCases.length > 0) {\n            console.log(\"Returning Test Cases from IndexedDB\");\n            return indexedDbTestCases;\n        }\n        // 3. If data is not found anywhere, call api and get it\n        const response = await (0,_api_test_cases_apis__WEBPACK_IMPORTED_MODULE_0__.getTestCasesApi)(); // Replace with actual API call\n        if (response.status !== 200) {\n            throw new Error(\"Failed to fetch data from API\");\n        }\n        console.log(\"Fetched test cases from API for page \".concat(page, \".\"));\n        // 4. Save the fetched data to IndexedDB in chunks\n        await (0,_services_indexedDBService__WEBPACK_IMPORTED_MODULE_1__.batchInsert)(response.data); // Insert into IndexedDB\n        // Return the freshly fetched data for the current page\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching test cases:\", error.message);\n        return rejectWithValue(error.message);\n    }\n});\nconst testCasesSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__.createSlice)({\n    name: \"testCases\",\n    initialState: {\n        data: [],\n        loading: false,\n        error: null,\n        isIndexed: false,\n        hasMore: true\n    },\n    reducers: {\n        setTestCases: (state, action)=>{\n            state.data = action.payload;\n            state.isIndexed = true;\n            console.log(\"Test case has been set\");\n        },\n        setLoading: (state, action)=>{\n            state.loading = action.payload;\n            console.log(\"Set loading is: \", action.payload);\n        },\n        setError: (state, action)=>{\n            state.error = action.payload;\n            state.loading = false;\n        },\n        resetTestCases: (state)=>{\n            state.data = [];\n            state.page = 1;\n            state.hasMore = true;\n        }\n    },\n    extraReducers: (builder)=>{\n        builder.addCase(fetchTestCases.pending, (state)=>{\n            state.loading = true;\n            state.error = null; // Reset errors on each fetch attempt\n        }).addCase(fetchTestCases.fulfilled, (state, action)=>{\n            if (action.payload.length === 0) {\n                state.hasMore = false; // No more data to load\n            }\n            // state.data = [...state.data, ...action.payload]; // Append the new batch of data\n            state.data = action.payload; // Append the new batch of data\n            state.loading = false;\n            state.isIndexed = true; // Set isIndexed to true if data is fetched\n        }).addCase(fetchTestCases.rejected, (state, action)=>{\n            state.loading = false;\n            state.error = action.payload || \"Failed to fetch test cases\";\n        });\n    }\n});\nconst { setTestCases, setLoading, setError, resetTestCases } = testCasesSlice.actions;\n/* harmony default export */ __webpack_exports__[\"default\"] = (testCasesSlice.reducer);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/reduxToolkit/testCasesSlice.js\n"));

/***/ })

});